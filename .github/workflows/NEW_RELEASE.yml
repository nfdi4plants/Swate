name: CI + Release

on:
  push:
    branches:
      - main

jobs:
  # --- Job 1: Run tests ---
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up .NET
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x.x

      # Restore .NET tools
      - name: Restore .NET dependencies
        run: dotnet tool restore

      # Install Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Remove root node_modules and lock file (Linux/macOS)
        if: runner.os != 'Windows'
        run: rm -rf node_modules package-lock.json

      - name: Remove Components node_modules and lock file (Linux/macOS)
        if: runner.os != 'Windows'
        run: rm -rf node_modules package-lock.
        working-directory: src/Components

      # Install npm dependencies
      - name: Install root dependencies
        run: npm i

      # Install component npm dependencies
      - name: Install components dependencies
        run: npm i
        working-directory: src/Components

      # Install playwright dependencies
      - name: Install Playwright dependencies
        run: npx playwright install chromium
        working-directory: src/Components

      - name: Run Tests
        run: dotnet run --project ./build/Build.fsproj test

  # --- Job 2: Detect new version ---
  detect-version:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      new_version: ${{ steps.read.outputs.new_version }}
      new_changelog: ${{ steps.read.outputs.new_changelog }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Run changelog script
        run: ./build.cmd changelog

      - id: read
        run: |
          json=$(cat artifacts/changelog.json)
          version=$(echo "$json" | jq -r .version)
          changelog=$(echo "$json" | jq -r .changelog)

          echo "new_version=$version" >> $GITHUB_OUTPUT
          echo "new_changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$changelog" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # # --- Job 3: Parallel release jobs ---
  # release-matrix:
  #   runs-on: ubuntu-latest
  #   needs: detect-version
  #   if: ${{ needs.detect-version.outputs.new_version != '' }}
  #   strategy:
  #     matrix:
  #       process: [nuget, npm, docs]
  #     fail-fast: false
  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: actions/setup-dotnet@v4
  #       with:
  #         dotnet-version: '9.0.x'

  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: '22'

  #     - run: dotnet tool restore

  #     - name: Run release process ${{ matrix.process }}
  #       run: ./build.cmd release:${{ matrix.process }} ${{ needs.detect-version.outputs.new_version }}

  # # --- Job 4: Create draft release only if all succeeded ---
  # finalize:
  #   runs-on: ubuntu-latest
  #   needs: release-matrix
  #   if: ${{ needs.detect-version.outputs.new_version != '' }}
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Create Git tag
  #       run: |
  #         git config user.name "github-actions"
  #         git config user.email "github-actions@users.noreply.github.com"
  #         git tag ${{ needs.detect-version.outputs.new_version }}
  #         git push origin ${{ needs.detect-version.outputs.new_version }}

  #     - name: Create Draft GitHub Release
  #       uses: softprops/action-gh-release@v2
  #       with:
  #         tag_name: ${{ needs.detect-version.outputs.new_version }}
  #         name: ${{ needs.detect-version.outputs.new_version }}
  #         body: ${{ needs.detect-version.outputs.new_changelog }}
  #         draft: true
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
